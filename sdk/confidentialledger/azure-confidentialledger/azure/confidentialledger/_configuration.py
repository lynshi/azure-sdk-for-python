# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional

from azure.core.configuration import Configuration
from azure.core.pipeline import policies

from ._version import VERSION


class ConfidentialLedgerClientConfiguration(Configuration):  # pylint: disable=too-many-instance-attributes
    """Configuration for ConfidentialLedgerClient.

    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param transaction_id: Identifies a write transaction. Required.
    :type transaction_id: str
    :param user_id: The user id, either an AAD object ID or certificate fingerprint. Required.
    :type user_id: str
    :param collection_id: The collection id. Default value is None.
    :type collection_id: str
    :keyword api_version: Api Version. Default value is "2022-05-13". Note that overriding this
     default value may result in unsupported behavior.
    :paramtype api_version: str
    """

    def __init__(self, transaction_id: str, user_id: str, collection_id: Optional[str] = None, **kwargs: Any) -> None:
        super(ConfidentialLedgerClientConfiguration, self).__init__(**kwargs)
        api_version = kwargs.pop("api_version", "2022-05-13")  # type: str

        if transaction_id is None:
            raise ValueError("Parameter 'transaction_id' must not be None.")
        if user_id is None:
            raise ValueError("Parameter 'user_id' must not be None.")

        self.transaction_id = transaction_id
        self.user_id = user_id
        self.collection_id = collection_id
        self.api_version = api_version
        kwargs.setdefault("sdk_moniker", "confidentialledger/{}".format(VERSION))
        self._configure(**kwargs)

    def _configure(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        self.user_agent_policy = kwargs.get("user_agent_policy") or policies.UserAgentPolicy(**kwargs)
        self.headers_policy = kwargs.get("headers_policy") or policies.HeadersPolicy(**kwargs)
        self.proxy_policy = kwargs.get("proxy_policy") or policies.ProxyPolicy(**kwargs)
        self.logging_policy = kwargs.get("logging_policy") or policies.NetworkTraceLoggingPolicy(**kwargs)
        self.http_logging_policy = kwargs.get("http_logging_policy") or policies.HttpLoggingPolicy(**kwargs)
        self.retry_policy = kwargs.get("retry_policy") or policies.RetryPolicy(**kwargs)
        self.custom_hook_policy = kwargs.get("custom_hook_policy") or policies.CustomHookPolicy(**kwargs)
        self.redirect_policy = kwargs.get("redirect_policy") or policies.RedirectPolicy(**kwargs)
        self.authentication_policy = kwargs.get("authentication_policy")
